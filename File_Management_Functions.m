function [tracks, metadata] = importTrackMateTracks(file, clipz, scalet)
%%IMPORTTRACKMATETRACKS Import linear tracks from TrackMate
%
% This function reads a XML file that contains linear tracks generated by
% TrackMate (http://fiji.sc/TrackMate). Careful: it does not open the XML
% TrackMate session file, but the track file exported in TrackMate using
% the action 'Export tracks to XML file'. This file format contains less
% information than the whole session file, but is enough for linear tracks
% (tracks that do not branch nor fuse).
%
% SYNTAX
%
% tracks = IMPORTTRACKMATETRACKS(file) opens the track file 'file' and
% returns the tracks in the variable 'tracks'. 'tracks' is a cell array,
% one cell per track. Each cell is made of 4xN double array, where N is the
% number of spots in the track. The double array is organized as follow: 
% [ Ti, Xi, Yi, Zi ; ...] where T is the index of the frame the spot has been
% detected in. T is always an integer. X, Y, Z are the spot spatial 
% coordinates in physical units.
%
% [tracks, metadata] = IMPORTTRACKMATETRACKS(file) also returns 'metadata',
% a struct that contains the metadata that could be retrieved from the XML
% file. It is made of the following fields:
%   - 'spaceUnits': a string containing the name of the physical spatial unit.
%   - 'timeUnits': a string containing the name of the physical temporal unit.
%   - 'frameInterval': a double whose value is the frame interval.
%   - 'date': a string representation of the date the XML file has been generated.
%   - 'source': a string representation of the TrackMate version this file
%     has been generated with.
%
% OUTPUT
%
% The function offers two flags to change how the output is returned. As
% stated above, by default, it is returned as [ Ti, Xi, Yi, Zi ; ...] where
% T is the frame as an integer.
%
%  tracks = IMPORTTRACKMATETRACKS(file, clipZ) allows specifying whether to
%  remove the Z coordinate entirely or not. TrackMate always return 3D
%  coordinates, even for 2D motion. In the latter case, the Z coordinate is
%  always 0. If 'clipZ' is set to true AND if all the particles have their
%  Z coordinate to 0, then 'tracks' will be made of [ Ti, Xi, Yi ] arrays.
%
%  tracks = IMPORTTRACKMATETRACKS(file, clipZ, scaleT) allows specifying
%  whether to scale the T coordinate by physical units. If scaleT is set to
%  true AND if the frame interval metadata value could be retrieved, then
%  the time will be returned in physical units, not in integer frame
%  number.
%
%
% FILE FORMAT
% 
% The XML file is expected to be formatted as follow:
% 
% <?xml version="1.0" encoding="UTF-8"?>
% <Tracks nTracks="39" spaceUnits="pixel" frameInterval="5.0" timeUnits="s" generationDateTime="Thu, 8 Aug 2013 13:33:23" from="TrackMate v2.1.0">
%   <particle nSpots="125">
%       <detection t="0" x="69.3" y="151.0" z="0.0" />
%       <detection t="1" x="70.0" y="153.0" z="0.0" />
%           ... etc...
%   </particle>
%   <particle nSpots="99">
%       ...
%   </particle>
%   ...
% </Tracks>
%
%
% Jean-Yves Tinevez <jeanyves.tinevez@gmail.com> - 2013

    %% Input 
    
    if nargin < 2
        clipz = false;
    end
    
    if nargin < 3
        scalet = false;
    end


    %% Load and Test compliance

    try
        doc = xmlread(file);
    catch %#ok<CTCH>
        error('Failed to read XML file %s.',file);
    end
    
    root = doc.getDocumentElement;
    
    if ~strcmp(root.getTagName, 'Tracks')
        error('MATLAB:importTrackMateTracks:BadXMLFile', ...
            'File does not seem to be a proper track file.')
    end
    
    %% Get metadata
    metadata.spaceUnits     = char( root.getAttribute('spaceUnits') );
    metadata.timeUnits      = char( root.getAttribute('timeUnits') );
    metadata.frameInterval  = str2double( root.getAttribute('frameInterval') );
    metadata.date           = char( root.getAttribute('generationDateTime') );
    metadata.source         = char( root.getAttribute('from') );
    
    
    %% Parse 
    
    nTracks = str2double( root.getAttribute('nTracks') );
    tracks = cell(nTracks, 1);
    trackNodes = root.getElementsByTagName('particle');
    
    for i = 1 : nTracks
       
        trackNode = trackNodes.item(i-1);
        nSpots = str2double( trackNode.getAttribute('nSpots') );
        A = NaN( nSpots, 4); % T, X, Y, Z
        
        detectionNodes = trackNode.getElementsByTagName('detection');
        
        for j = 1 : nSpots
            
            detectionNode = detectionNodes.item(j-1);
            t = str2double(detectionNode.getAttribute('t'));
            x = str2double(detectionNode.getAttribute('x'));
            y = str2double(detectionNode.getAttribute('y'));
            z = str2double(detectionNode.getAttribute('z'));
            A(j, :) = [ t x y z ];
            
        end
        
        tracks{i} = A;
        
    end
    
    %% Clip Z dimension if possible and asked
    
    if clipz
        
        if all(cellfun(@(X) all( X(:,4) == 0), tracks))
            % Remove the z coordinates since it is 0 everywhere
            for i = 1 : nTracks
                tracks{i} = tracks{i}(:, 1:3);
            end
        end
        
    end
    
    %% Scale time using physical units if required
    
    if scalet
        if ~isnan(metadata.frameInterval) && metadata.frameInterval > 0
            
            % Scale time so that it is in physical units
            for i = 1 : nTracks
                tracks{i}(:, 1) = tracks{i}(:, 1) * metadata.frameInterval;
            end
            
        end
        
    end
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Get filenames function
function filenames=GetFileNames(directory,pattern)

% Use this code to run a command thorugh all files with 
% a given pattern inside subfolders
% 
% directory='Y:\Patrick\EDM\'; %subfolders will be inside
% pattern='tracks_*.txt';     % This is the pattern to find for XY files
% folderpattern='*';  %subfolder pattern

oldfolder=cd(directory);
files=dir(pattern); % tracks files
counter=0;
for m=1:length(files)
            counter=counter+1;
            filenames(counter)=cellstr(strcat(directory,'\',char(files(m).name)));
            %disp(filenames(counter))
end
cd ../
cd(oldfolder)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Convert XML file to TXT with specific format
% columns are X0 Y0 X1 Y1 ... / rows are XY coordinates for each frame

% file to read
filename='C:\Users\ryanr\OneDrive\Desktop\Krapf Research\RNA data analysis\Trajectories\Test 2024-3-30\Dish 1\Sample1001_control_Tracks.xml';
% filename to write to
savefile='C:\Users\ryanr\OneDrive\Desktop\Krapf Research\RNA data analysis\Trajectories\Test 2024-3-30\Dish 1\Sample1001_control_Tracks.txt';
% pixel size in micrometers (if in pixels, use 1)
pixelsize = 0.130; 
% maximum track length in frames (movie length)
Max = 1500; 

%% Import tracks, output of trackMate plugin and display them
[tracks, metadata] = importTrackMateTracks(filename); 

% Initialize empty matrix from cell array output of importTrackmateTracks
    % Each cell contains an Nx4 double where N = traj length, 4 = t,x,y,z
    % M = number of trajectories
[M,N]=size(tracks);
% Initialize a matrix of NaNs: [rows=frames, cols=X/Y coords]
B(1:Max,1:2*M)=NaN;
format = '';
title = '';
% Writing a txt file
fid = fopen(savefile, 'w');
traj_counter = 0;
% for each trajectory
for i=1:M
    % cell array of {row,1}
    A=tracks{i,1};
    % Q = length of trajectory, P = 4 (t,x,y,z)
    [Q,P]=size(A);
    % rows = traj length, cols = x coordinates
    B(1:Q,2*i-1)=A(:,2) * pixelsize;
    % y coordinates
    B(1:Q,2*i)=A(:,3) * pixelsize;
    % Write to 4 decimal places
    format = [format,'%12.4f\t%12.4f\t'];
    % Write header (X0 Y0 X1 Y1 ...)
    title = [title, '      ' 'X' num2str(traj_counter) '      ' '\t' '      ' 'Y' num2str(traj_counter) '      ' '\t'];
    traj_counter = traj_counter + 1;
end

%% Write
fprintf(fid, [title,'\r\n']);
fprintf(fid,[format,'\r\n'] ,B');
fclose(fid);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Trajectory length function
function lengths=lengthsTrajFunction(dataXY)
% Finds the length of each trajectory
% Outputs an array with the lengths of all trajectories 
%
[p1,p2]=size(dataXY);
len=NaN(1,p2/2); %initializes array
%
for i=1:2:p2
x=dataXY(:,i);
x(isnan(x))=[];
len((i+1)/2)=length(x);
end
%
lengths=len;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Filter trajectories of minimum lengths in a file and resave
%
directory='C:\Users\ryanr\OneDrive\Desktop\Krapf Research\RNA data analysis\';
filename='T001_Tracks.txt'; %File to process
minlength=64; %minimum trajectory length
savefilename='Filtered_min'; % do not add directory or .txt extension. Minlength is added automatically also.
%%
% Do not change anything after this line

tracks_headers=1;
%%
savefilename=strcat(directory,savefilename,string(minlength),'_',filename);
file_name=strcat(directory,filename);

    
    if tracks_headers>0
        A0 = importdata(file_name, '\t', tracks_headers);
        A0 = A0.data;
    else
        A0 = importdata(file_name, '\t'); %when data does not have header
    end

    p1=size(A0,1);
    
    if p1>=minlength
        % Filter trajectories according to length
        lengths=lengthsTrajFunction(A0); %lengths of all trajectories
        len=NaN(1,length(lengths)*2);
        len(1:2:length(len)-1)=lengths; %X
        len(2:2:length(len))=lengths;   %Y
        A0(:,len<minlength)=[];
        %header(len<minlength)=[];
	else
		A0=[];
    end
	

dlmwrite(savefilename,A0,'delimiter','\t','precision','%.3f');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Filter trajectories of minimum length and concatenate all files into 
% a single one for future ensemble analysis.
%
directory='C:\Users\ryanr\OneDrive\Desktop\Krapf Research\Tracking\Concatenated\4 planes\New';
pattern='Filtered_min64_T0_Capture_??.txt'; %Common pattern to all files to combine
minlength=64; %minimum trajectory length
savefilename='Conc_Filtered_T0_4planes-'; % do not add directory or .txt extension. Minlength is added automatically also.
%%
% Do not change anything after this line

tracks_headers=1;
%%
filenames=GetFileNames(directory,pattern);
directory=strcat(directory,'\');
L=[];
alldata=[];

for i=1:size(filenames,2)
    [~,file_name,ext] = fileparts(char(filenames(i)));
    %file_name=strcat(file_name,ext);
    
    disp(file_name)
    %save_file_name=strcat('length260',file_name,'_nm',ext);
    file_name=strcat(directory,file_name,ext);
    
    A0 = importdata(file_name, '\t', tracks_headers);
    header=A0.textdata;
    A0 = A0.data;
    p1=size(A0,1);
    
    if p1>=minlength
        % Filter trajectories according to length
        lengths=lengthsTrajFunction(A0); %lengths of all trajectories
        len=NaN(1,length(lengths)*2);
        len(1:2:length(len)-1)=lengths; %X
        len(2:2:length(len))=lengths;   %Y
        A0(:,len<minlength)=[];
        header(len<minlength)=[];
        A0=A0(1:minlength,:);
        p2=size(A0,2);
        %
        alldata=[alldata A0]; %data
        L=[L;p2]; %lengths
    end
end

dlmwrite(strcat(directory,savefilename,string(minlength),'.txt'),alldata,'delimiter','\t','precision','%.3f');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Filter trajectories of minimum length and concatenate all files into 
% a single one for future ensemble analysis.
% Files can have different length.
% all files must have the same number of header rows.

% N: number of trajectories in each file
% alldata: output, concatenated files
% 
% minlength: minimum trajectory length to use. remove shorter ones
% pattern: Common pattern to all files to combine
% tracks_headers: number of header rows in files
%
directory='C:\Users\ryanr\OneDrive\Desktop\Krapf Research\RNA data analysis\Trajectories\05-16-23 (cyclo)\All\Cyclo +19-31min';
pattern='T0_Cyclo_+19-31min_min128_*.txt'; %Common pattern to all files to combine
minlength=128; %minimum trajectory length
savefilename='T0_Cyclo_+19-31min_min'; % do not add directory or .txt extension. Minlength is added automatically also.
tracks_headers=0;

%%
% Do not change anything after this line

filenames=GetFileNames(directory,pattern);
directory=strcat(directory,'\');
N=[]; % number of trajectgories per file
alldata=[];

for i=1:size(filenames,2)
    [~,file_name,ext] = fileparts(char(filenames(i)));
    disp(file_name)
    file_name=strcat(directory,file_name,ext);
    
    %load file
    if tracks_headers>0
        A0 = importdata(file_name, '\t', tracks_headers);
        A0 = A0.data;
    else
        A0 = importdata(file_name, '\t'); %when data does not have header
    end

    p1=size(A0,1);
    
    if p1>=minlength
        % Filter trajectories according to length
        lengths=lengthsTrajFunction(A0); %lengths of all trajectories
        len=NaN(1,length(lengths)*2);
        len(1:2:length(len)-1)=lengths; %X
        len(2:2:length(len))=lengths;   %Y
        A0(:,len<minlength)=[];
        %A0=A0(1:minlength,:); %keep only minlength
        [pa,pb]=size(alldata);
        [p1,p2]=size(A0);
        if pa<p1
            extra_frames=p1-pa;
            alldata=[alldata;nan(extra_frames,pb)]; %add NaNs to alldata
        elseif p1<pa
            extra_frames=pa-p1;
            A0=[A0;nan(extra_frames,p2)]; %add NaNs to A0
        end 
        %
        alldata=[alldata A0]; %data
        N=[N;p2]; %Trajectories
    else
        disp('File not useful - too short.')
    end
end

dlmwrite(strcat(directory,savefilename,string(minlength),'.txt'),alldata,'delimiter','\t','precision','%.3f');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Extract intensity values from ImageJ CSV
%%
% filename is CSV table with intensities
filename='Z:\krapflab\Ryan\Analysis and concatenated files\Snehal miRNA\13 fps, single plane\Spots_table_C2-Cell4_armed_0z_13fps_MMStack_Pos0.csv'; %CSV file to read
minlength = 64;

%%

% Read csv table
T = readtable(filename);
% Display available opts
opts = detectImportOptions(filename)
% Filter for these opts
opts.SelectedVariableNames = {'TRACK_ID','TOTAL_INTENSITY_CH1'};
% New table with Track ID and Total Intensity
T1 = readtable(filename,opts);
% Convert to an array
T2 = table2array(T1);

% Rearrange T-1
track_ID_col = T2(:,1);
D = diff(track_ID_col); % Finds where each track ends
track_rows = find(D); % Every row where a track ends

% First row = 0 for first trajectory
track_rows = track_rows';
M=size(T2,1); % Row of last trajectory
track_rows = [0 track_rows M];
traj_lengths = diff(track_rows);
Max = max(traj_lengths);

% T3 is template for intensity columns
T3(1:Max,1:length(track_rows)-1) = NaN;
col_counter = 2;
%for i = 1:out(col_counter) % i=1-13, 1-77, etc.
for i = 1:length(track_rows)-1
    % T3(row 1:13/77/etc, col 1/2/3...) = T2(row 1/13/77/etc:13/77/etc,2)
    T3(1:traj_lengths(i),i) = T2(track_rows(col_counter-1)+1:track_rows(col_counter-1)+1 + traj_lengths(i)-1,2);
    col_counter = col_counter + 1;
end

nanCt = sum(~isnan(T3(:,:))); % Get trajectory lengths per column
short_trajectories = find(nanCt < minlength); % Find columns < minlength
T3(:,short_trajectories) = []; % Remove columns < minlength
% Check that it worked
new_nanCt = sum(~isnan(T3(:,:)));
min_traj = min(new_nanCt);

% Avg Intensities
Tavg = mean(T3, 'omitnan');
% For plotting in Origin
Tavg = Tavg';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Remove one trajectory from XY data
% note that the header will not be saved

badTr=1318; % trajectory to delete

directory='C:\Users\ryanr\OneDrive\Desktop\Krapf Research\RNA data analysis\Trajectories\05-16-23 (cyclo)\All\Cyclo +19-31min\';
file_name='nCyclo_+19-31min_min64.txt'; % XY file (high min length)
tracks_headers = 0; % Number of header rows in file, 0 for no header

savefilename=strcat(directory,'n',file_name); %modified file name to save
file_name=strcat(directory,file_name);
if tracks_headers>0
    A0 = importdata(file_name, '\t', tracks_headers);
    A0 = A0.data;
else
    A0 = importdata(file_name, '\t'); %when data does not have header
end

A0(:,2*badTr-1:2*badTr)=[];

dlmwrite(savefilename,A0,'delimiter','\t','precision','%.3f');
